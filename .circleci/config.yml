# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  build:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - run: npm update
      - run: npm run lint

  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - run: npm update
      - run: npm run test

  analyze:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: npm i
      - run: npm update
      - run: npm audit

  creapromote_to_production:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -yq curl unzip awscli ansible

      - run: 
          name: bring up cloudformation
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name tobiepicdeployment3 \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
            #aws cloudformation create-stack --stack-name infraStack --template-body file://infra/template.yml --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=us-east-1
      
      - add_ssh_keys:
          fingerprints: ["c0:88:5a:7b:6c:1c:08:67:06:fa:46:62:f4:8c:e2:96"]

  create_and_deploy_front_end:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -yq curl unzip awscli ansible
      - run:
          name: bring up S3
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name "${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1

  get_last_deployment_id:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -yq curl unzip awscli ansible
      - run:
          name: listing exports 
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > lastID.txt
            cat lastID.txt
      
      - persist_to_workspace:
          root: .
          paths:
            - lastID.txt

  clean_up_old_front_end:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -yq curl unzip awscli ansible
      - attach_workspace:
          at: .
      - run:
          name: clean old frontend 
          command: |
            cat lastID.txt
            aws s3 rm $(cat lastID.txt) --recursive
            aws cloudformation delete-stack --stack-name $(cat lastID.txt)



  destroy_infrastructure:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: install aws-cli
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -yq curl unzip awscli ansible

      - run: 
          name: bring up cloudformation
          command: |
            aws cloudformation delete-stack --stack-name infraStack


  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test.
          command: |
            URL="https://blog.udacity.com/"
            if curl -s --head ${URL} # test if blog.udacity. com exists
            then
              return 0
            else
              return 1
            fi

workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      #- welcome/run
      #- build 
      #- test:
      #    requires:
      #      - build
      #- create_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - destroy_infrastructure:
          requires:
            - get_last_deployment_id

